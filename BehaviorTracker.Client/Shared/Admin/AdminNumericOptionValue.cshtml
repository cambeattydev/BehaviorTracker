@inherits AdminNumericOptionValueModel

<h5>
    Available Answers
    <button class="btn btn-link @(_editMode ? "d-none" : "")" style="font-size: .75em;" onclick="@Edit" aria-label="Edit">
        <span class="oi oi-pencil"></span>
    </button>
    <button class="btn btn-link @(!canDelete || _editMode ? "d-none" : "")" style="font-size: .75em; color: red" onclick="@Delete" aria-label="Delete">
        <span class="oi oi-trash"></span>
    </button>
</h5>
@if (!_editMode)
{
    <ul>
        @if (Goal.AvailableAnswers != null)
        {
            foreach (var answer in Goal.AvailableAnswers)
            {
                <li>@answer.OptionValue</li>
            }
        }
    </ul>
}
else
{
    <form class="form @(!_editMode ? "d-none" : "")" style="font-size: .75em;" onsubmit="@Save">
        
        <label for="StartValue-@Model.GoalKey">Start Value</label>
        <div class="input-group">
            <input type="number" class="form-control @ValidationClassName(nameof(Model.StartValue))" id="StartValue-@Model.GoalKey" aria-describedby="Start Value" bind="@Model.StartValue" onblur="@(() => ValidateAsync(nameof(Model.StartValue)))"/>
            <ValidationMessages IsInvalid="@(() => IsInvalid(nameof(Model.StartValue)))" Errors="@ErrorsOf(nameof(Model.StartValue))"/>
        </div>
        <label for="EndValue-@Model.GoalKey">End Value</label>
        <div class="input-group">
            <input type="number" class="form-control @ValidationClassName(nameof(Model.EndValue))" id="EndValue-@Model.GoalKey" aria-describedby="End Value" bind="@Model.EndValue" onblur="@(() => ValidateAsync(nameof(Model.EndValue)))"/>
            <ValidationMessages IsInvalid="@(() => IsInvalid(nameof(Model.EndValue)))" Errors="@ErrorsOf(nameof(Model.EndValue))"/>
        </div>
        <label for="StepAmount-@Model.GoalKey">Step Amount</label>
        <div class="input-group">
            <input type="number" class="form-control @ValidationClassName(nameof(Model.StepAmount))" id="StepAmount-@Model.GoalKey" aria-describedby="Step Amount" step="@Model.StepAmount" bind="@Model.StepAmount" onblur="@(() => ValidateAsync(nameof(Model.StepAmount)))"/>
            <ValidationMessages IsInvalid="@(() => IsInvalid(nameof(Model.StepAmount)))" Errors="@ErrorsOf(nameof(Model.StepAmount))"/>
        </div>
        <button type="button" class="btn btn-link" aria-label="Cancel" onclick="@Cancel">
            <span class="oi oi-x" style="color: red"></span>
        </button>
        <button type="submit" class="btn btn-link" aria-label="Save">
            <span class="oi oi-check" style="color: green"></span>
        </button>
    </form>
}