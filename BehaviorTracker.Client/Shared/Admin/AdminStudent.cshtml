@inject HttpClient Http
@using System.Collections
@using BehaviorTracker.Client.Shared.Common
@using BehaviorTracker.Client.Validators
@using FluentValidation
@using FluentValidation.Internal

<div class="row">
    <div class="col-12">
        <div id="StudentKey@(Model.StudentKey)Accordion">
            <div class="card">
                <div class="card-header" id="StudentKey@(Model.StudentKey)Header">
                    <h5 class="mb-0">
                        <button class="btn btn-link @(_editMode ? "d-none" : "")" data-toggle="collapse" data-target="#StudentKey@(Model.StudentKey)Body" aria-expanded="true" aria-controls="@Model.StudentFirstName @Model.StudentLastName">
                            @Model.StudentFirstName @Model.StudentLastName
                        </button>
                        <form class="form-inline @(!_editMode ? "d-none" : "")" style="font-size: .75em;" onsubmit="@Save">
                            <div class="form-group">
                                <label for="FirstName-@Model.StudentKey">First Name</label>
                                <input type="text" class="form-control" id="FirstName-@Model.StudentKey" aria-describedby="First Name" placeholder="First Name" bind="@Model.StudentFirstName" onblur="@(() => Validate(nameof(Model.StudentFirstName)))"/>
                                @* TODO Need to add logic to make this stuff a base class of some time so I dont have to write this a bunch of times *@
                                @if (Errors.ContainsKey(nameof(Model.StudentFirstName)) && Errors[nameof(Model.StudentFirstName)].Any())
                                {
                                    foreach (var error in Errors[nameof(Model.StudentFirstName)])
                                    {
                                      <span class="text-danger">@error</span>  
                                    }
                                }
                            </div>
                            <div class="form-group">
                                <label for="LastName-@Model.StudentKey">Last Name</label>
                                <input type="text" class="form-control" id="LastName-@Model.StudentKey" aria-describedby="Last Name" placeholder="Last Name" bind="@Model.StudentLastName"/>
                            </div>
                            <button type="button" class="btn btn-link" aria-label="Cancel" onclick="@Cancel">
                                <span class="oi oi-x" style="color: red"></span>
                            </button>
                            <button type="submit" class="btn btn-link" aria-label="Save">
                                <span class="oi oi-check" style="color: green"></span>
                            </button>
                        </form>
                        <button class="btn btn-link @(_editMode ? "d-none" : "")" style="font-size: .75em;" onclick="@Edit" aria-label="Edit">
                            <span class="oi oi-pencil"></span>
                        </button>
                        <button class="btn btn-link @(_editMode ? "d-none" : "")" style="font-size: .75em; color: red" onclick="@Delete" aria-label="Delete">
                            <span class="oi oi-trash"></span>
                        </button>

                    </h5>
                </div>
                <div id="StudentKey@(Model.StudentKey)Body" class="collapse show" aria-labelledby="StudentKey@(Model.StudentKey)Header" data-parent="#StudentKey@(Model.StudentKey)Accordion">
                    <div class="card-body">
                        <h5>Goals</h5>
                        @if (Model.Goals != null)
                        {
                            foreach (var goal in Model.Goals)
                            {
                                <AdminGoal DeleteGoal="@DeleteGoal" Model="@goal"/>
                            }
                            <AddButton OnAdd="@AddGoal" ButtonText="Add Goal"/>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions
{

    [Parameter]
    Client.Models.Student Model { get; set; }

    Client.Models.Student OriginalModel { get; set; }

    [Parameter]
    Action<Models.Student> DeleteStudent { get; set; }
    
    StudentValidator _studentValidator  = new StudentValidator();

    bool _validated;
    //TODO Move to base class
    IDictionary<string, IEnumerable<string>> Errors = new Dictionary<string, IEnumerable<string>>();

    //[CascadingParameter] Modal _modal { get; set; }

    bool _editMode;

    protected override void OnInit()
    {
        if (Model == null)
        {
            Model = new Models.Student();
        }
        if (Model.StudentKey < 1)
        {
            _editMode = true;
        }
    }

    void Delete()
    {
        DeleteStudent(Model);
    }

    void Edit()
    {
        _editMode = true;
        OriginalModel = Model.Copy();
    }

    void Cancel()
    {
        if (Model.StudentKey > 0)
        {
            Model = OriginalModel;
            _editMode = false;
        }
        else
        {
            DeleteStudent(Model);
        }
    }

    void AddGoal()
    {
        if (Model.Goals == null || !Model.Goals.Any())
        {
            Model.Goals = new List<Models.Goal>
            {
                new Models.Goal()
                {
                    StudentKey = Model.StudentKey,
                    AvailableAnswers = new List<Models.GoalAvailableAnswer>(),
                    GoalKey = 0
            
                }
            };
            base.StateHasChanged();
            return;            
        }
        
        var minGoalKey = Model.Goals.Min(s => s.GoalKey);
        var newGoal = new Models.Goal()
        {
            StudentKey = Model.StudentKey,
            AvailableAnswers = new List<Models.GoalAvailableAnswer>(),
            GoalKey = minGoalKey > 0 ? 0 : minGoalKey
            
        };

        var goals = Model.Goals.ToList();
        goals.Add(newGoal);
        Model.Goals = goals;
        base.StateHasChanged();
    }

    void DeleteGoal(Models.Goal goal)
    {
        var goals = Model.Goals.ToList();
        var deleted = goals.Remove(goal);
        if (deleted)
        {
            Model.Goals = goals;
            base.StateHasChanged();
        }
    }

    //TODO Move to base class
    async Task Validate(string propertyName)
    {
        var context = new ValidationContext<Student>(Model, new PropertyChain(), new MemberNameValidatorSelector(new []{propertyName}));
        var validationResult =  await _studentValidator.ValidateAsync(context);
        Console.WriteLine(validationResult.ToString());
        Errors[propertyName] = validationResult.Errors.Where(error => error.PropertyName == propertyName).Select(s => s.ErrorMessage);
    }

    //    async Task ShowModal()
    //    {
    //        _modal.ElementId = $"DeleteStudent{Model.StudentKey}";
    //        _modal.BodyHtml = builder =>
    //        {
    //            builder.OpenElement(0, "p");
    //            builder.AddContent(1, $"Are you sure you want to delete {Model.StudentFirstName} {Model.StudentLastName}");
    //            builder.CloseElement();
    //        };
    //        _modal.IsDelete = true;
    //        _modal.ConfirmText = "Delete";
    //        _modal.OnSubmit = Delete;
    //        _modal.StateHasChanged();
    //        
    //        await JSRuntime.Current.InvokeAsync<string>("modal.show",_modal.ElementId );        
    //    }

    async Task Save()
    {
        _editMode = false;
        try
        {
            var newModel = await Http.PostJsonAsync<Client.Models.Student>("/api/Student/Student", Model);
            Model = newModel;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

}