@inject HttpClient Http
@using System.Globalization
@using System.Net
@using System.Web
@using BehaviorTracker.Shared
@if (_students != null)
{
    <table class="table">
        <tbody>
        @foreach (var student in _students)
        {
            <tr>
                <td>@student.StudentFirstName @student.StudentLastName</td>
                @foreach (var goal in student.Goals)
                {
                    if (_studentGoalAnswers.ContainsKey(student.StudentKey) && _studentGoalAnswers[student.StudentKey].ContainsKey(goal.GoalKey.ToString()))
                    {
                        <td>
                            @if (goal.GoalType == GoalType.YesNo)
                            {
                                <YesNoGoalAnswer Goal="@goal" Answer="@_studentGoalAnswers[student.StudentKey][goal.GoalKey.ToString()]" CurrentDateTime="@CurrentDateTime"/>
                            }
                            else
                            {
                                <NumericGoalAnswer Goal="@goal" Answer="@_studentGoalAnswers[student.StudentKey][goal.GoalKey.ToString()]" CurrentDateTime="@CurrentDateTime" />
                            }
                        </td>
                    }
                }
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>Loading...</p>
}

@functions {
    Models.Student[] _students;
    //Todo this has to be a string right now because of how deserialization works with wasm
    IDictionary<long, IDictionary<string, GoalAnswer>> _studentGoalAnswers = new Dictionary<long, IDictionary<string, GoalAnswer>>();

    private DateTime _currentDateTime;
    [Parameter] DateTime CurrentDateTime
    {
        get => _currentDateTime;
        set
        {
            Console.WriteLine($"_currentDateTime:{_currentDateTime}/value:{value}");
            if (_currentDateTime != value)
            {
                _currentDateTime = value;
                Task.Run(async () => await GetStudentAnswers());
            }
        }
    }

    protected override async Task OnInitAsync()
    {
        _students = await Http.GetJsonAsync<Models.Student[]>("api/Student/GetStudentsWithGoalsAndAvailableAnswers");
        if (CurrentDateTime > DateTime.MinValue)
        {
            await GetStudentAnswers();
        }
        Console.WriteLine("On Init for student finished");
    }

    private async Task GetStudentAnswers()
    {
        if (_students == null){return;}
        
        try
        {
            foreach (var student in _students)
            {
                var responseMessage = await Http.GetAsync(
                    $"api/GoalAnswer/StudentGoalAnswers/{student.StudentKey}/{HttpUtility.UrlEncode(CurrentDateTime.ToString("yyyy-MM-ddTHH:mm:ss", CultureInfo.InvariantCulture))}");
                
                if (responseMessage.StatusCode == HttpStatusCode.OK)
                {
                    _studentGoalAnswers[student.StudentKey] = Microsoft.JSInterop.Json.Deserialize<IDictionary<string,GoalAnswer>>(await responseMessage.Content.ReadAsStringAsync());
                }
                else
                {
                    _studentGoalAnswers[student.StudentKey] = student.Goals.ToDictionary(goal => goal.GoalKey.ToString(), goal => new GoalAnswer
                    {
                        Date = CurrentDateTime,
                        GoalKey = goal.GoalKey,
                        Goal = goal
                    });
                }
            }
           
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ex.GetType:{ex.GetType()}\nex.Message:{ex.Message}");
            throw;
        }
        base.StateHasChanged();
    }

}