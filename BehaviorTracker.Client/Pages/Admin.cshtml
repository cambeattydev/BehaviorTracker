@page "/Admin"
@using BehaviorTracker.Client.Shared.Common
@using Student = BehaviorTracker.Client.Models.Student

@inject HttpClient Http
<h3>Students</h3>

@if (_students != null)
{
    <div class="row">
        @foreach (var student in _students)
        {
             <AdminStudent Model="@student" DeleteStudent="@DeleteStudent"/>
        }
    </div>
    <div class="row">
        <div class="col-12">
            <button onclick="@AddStudent" class="btn btn-primary">
                Add Student <span class="oi oi-plus"></span>
            </button>
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}

@functions
{
    IList<Models.Student> _students;
    
    [CascadingParameter] Modal _modal { get; set; }

    protected override async Task OnInitAsync()
    {
        _students = await Http.GetJsonAsync<IList<Models.Student>>("api/Student/GetStudentsWithGoalsAndAvailableAnswers");
    }

    protected override void OnAfterRender()
    {
        _modal.ElementId = "This is a test";
    }

    void AddStudent()
    {
        if (_students == null)
        {
            _students = new List<Models.Student>();
        }
        var minStudentKey = _students.Min(s => s.StudentKey);
        var newStudent = new Models.Student
        {
            StudentKey = minStudentKey > 0 ? 0 : minStudentKey,
            Goals = new List<Models.Goal>()
        };

        
        _students.Add(newStudent);
    }

    void DeleteStudent(Models.Student student)
    {
        Console.WriteLine("Begin DeleteStudent");
        var deleted = _students.Remove(student);
        Console.WriteLine("StudentRemoved");
        if (deleted)
        {
            Console.WriteLine("Student Deleted");
            base.StateHasChanged();
            Console.WriteLine("StudentDeleted after StateHasChanged");
        }
        Console.WriteLine("End StudentDeleted");
    }

}