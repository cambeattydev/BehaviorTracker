@page "/Admin"
@using BehaviorTracker.Client.Shared.Common
@using Student = BehaviorTracker.Client.Models.Student
@using Microsoft.JSInterop;

@inject HttpClient Http
<h3>Students</h3>

@if (_students != null)
{
       foreach (var student in _students)
       {
           <AdminStudent Model="@student" DeleteStudentAsync="@DeleteStudentAsync"/>
       }
    <AddButton OnAdd="@AddStudent" ButtonText="Add Student"/>
}
else
{
    <spinner/>
}

@functions
{
    List<Models.Student> _students;

    protected override async Task OnInitAsync()
    {
        _students = await Http.GetJsonAsync<List<Models.Student>>("api/Student/GetStudentsWithGoalsAndAvailableAnswers");
    }

    void AddStudent()
    {
        if (_students == null || !_students.Any())
        {
            _students = new List<Models.Student>
            {
                new Models.Student
                {
                    StudentKey = 0,
                    Goals = new List<Models.Goal>()
                }
            };
            base.StateHasChanged();
            return;
        }
        var minStudentKey = _students.Min(s => s.StudentKey);
        var newStudent = new Models.Student
        {
            StudentKey = minStudentKey > 0 ? 0 : minStudentKey,
            Goals = new List<Models.Goal>()
        };


        _students.Add(newStudent);
        base.StateHasChanged();
    }

    async Task DeleteStudentAsync(Models.Student student)
    {
        var deletedStudentMessage = await Http.DeleteAsync($"api/Student/Delete/{student.StudentKey}");
        if (deletedStudentMessage.IsSuccessStatusCode)
        {
            var stringDeletedStudent = await deletedStudentMessage.Content.ReadAsStringAsync();
            var deletedStudent = Json.Deserialize<Models.Student>(stringDeletedStudent);
            var deleted = _students.RemoveAll(listStudent => listStudent.StudentKey == deletedStudent.StudentKey);
            Console.WriteLine($"Deleted:{deleted}");
            if (deleted > 0)
            {
                base.StateHasChanged();
            }
        }

    }

}